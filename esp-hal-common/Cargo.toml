[package]
name    = "esp-hal-common"
version = "0.7.1"
authors = [
    "Jesse Braham <jesse@beta7.io>",
    "Bj√∂rn Quentin <bjoern.quentin@mobile-j.de>",
]
edition      = "2021"
rust-version = "1.65.0"
description  = "HAL implementations for peripherals common among Espressif devices; should not be used directly"
repository   = "https://github.com/esp-rs/esp-hal"
license      = "MIT OR Apache-2.0"

[dependencies]
cfg-if               = "1.0.0"
critical-section     = "1.1.1"
embedded-can         = { version = "0.4.1", optional = true }
embedded-dma         = "0.2.0"
embedded-hal         = { version = "0.2.7", features = ["unproven"] }
embedded-hal-1       = { version = "=1.0.0-alpha.9", optional = true, package = "embedded-hal" }
embedded-hal-nb      = { version = "=1.0.0-alpha.1", optional = true }
esp-synopsys-usb-otg = { version = "0.3.1", optional = true, features = ["fs", "esp32sx"] }
fugit                = "0.3.6"
lock_api             = { version = "0.4.9", optional = true }
nb                   = "1.0.0"
paste                = "1.0.11"
procmacros           = { version = "0.4.0", package = "esp-hal-procmacros", path = "../esp-hal-procmacros" }
strum                = { version = "0.24.1", default-features = false, features = ["derive"] }
void                 = { version = "1.0.2", default-features = false }
usb-device           = { version = "0.2.9", optional = true }

# async
embedded-hal-async = { version = "0.2.0-alpha.0", optional = true }
embassy-sync       = { version = "0.1.0", optional = true }
embassy-time       = { version = "0.1.0", features = ["nightly"], optional = true }
embassy-futures    = { version = "0.1.0", optional = true }

# RISC-V
esp-riscv-rt                = { version = "0.1.0", optional = true }
riscv-atomic-emulation-trap = { version = "0.4.0", optional = true }

# Xtensa
xtensa-lx    = { version = "0.8.0",  optional = true }
xtensa-lx-rt = { version = "0.15.0", optional = true }

# Smart-LED (e.g., WS2812/SK68XX) support
smart-leds-trait = { version = "0.2.1", optional = true }

# Part of `ufmt` containing only `uWrite` trait
ufmt-write = { version = "0.1.0", optional = true }

# IMPORTANT:
# Each supported device MUST have its PAC included below along with a
# corresponding feature.
esp32   = { version = "0.21.0", features = ["critical-section"], optional = true }
esp32c2 = { version = "0.8.0",  features = ["critical-section"], optional = true }
esp32c3 = { version = "0.11.0", features = ["critical-section"], optional = true }
esp32c6 = { version = "0.1.0",  features = ["critical-section"], optional = true }
esp32s2 = { version = "0.12.0", features = ["critical-section"], optional = true }
esp32s3 = { version = "0.15.0", features = ["critical-section"], optional = true }

[features]
esp32   = ["esp32/rt"  , "xtensa", "xtensa-lx/esp32",   "xtensa-lx-rt/esp32",   "lock_api", "procmacros/esp32"]
esp32c2 = ["esp32c2/rt", "riscv",  "procmacros/esp32c2"]
esp32c3 = ["esp32c3/rt", "riscv",  "procmacros/esp32c3"]
esp32c6 = ["esp32c6/rt", "riscv",  "procmacros/esp32c6"]
esp32s2 = ["esp32s2/rt", "xtensa", "xtensa-lx/esp32s2", "xtensa-lx-rt/esp32s2",             "esp-synopsys-usb-otg", "usb-device", "procmacros/esp32s2"]
esp32s3 = ["esp32s3/rt", "xtensa", "xtensa-lx/esp32s3", "xtensa-lx-rt/esp32s3", "lock_api", "esp-synopsys-usb-otg", "usb-device", "procmacros/esp32s3"]

esp32_40mhz = []
esp32_26mhz = []

esp32c2_40mhz = []
esp32c2_26mhz = []

# Implement the `embedded-hal==1.0.0-alpha.x` traits
eh1 = ["embedded-hal-1", "embedded-hal-nb", "embedded-can"]

# To use the external `smart_led` crate
smartled = ["smart-leds-trait"]

# To support `ufmt`
ufmt = ["ufmt-write"]

# To use vectored interrupts (calling the handlers defined in the PAC)
vectored = ["procmacros/interrupt"]

# Implement the `embedded-hal-async==1.0.0-alpha.x` traits
async   = ["embedded-hal-async", "eh1", "embassy-sync", "embassy-futures"]
embassy = ["embassy-time"]

embassy-time-systick = []
embassy-time-timg0   = []

# Architecture-specific features (intended for internal use)
riscv  = ["critical-section/restore-state-u8",  "procmacros/riscv", "esp-riscv-rt", "riscv-atomic-emulation-trap"]
xtensa = ["critical-section/restore-state-u32", "procmacros/xtensa"]
