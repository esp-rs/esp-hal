[package]
name    = "esp-hal-common"
version = "0.1.0"
authors = [
    "Jesse Braham <jesse@beta7.io>",
    "Bj√∂rn Quentin <bjoern.quentin@mobile-j.de>",
]
edition     = "2021"
description = "HAL implementations for peripherals common among Espressif devices; should not be used directly"
repository  = "https://github.com/esp-rs/esp-hal"
license     = "MIT OR Apache-2.0"

[dependencies]
cfg-if         = "1.0"
embedded-hal   = { version = "0.2", features = ["unproven"] }
embedded-hal-1 = { package = "embedded-hal", version = "=1.0.0-alpha.8", optional = true }
fugit          = "0.3"
nb             = "1.0"
paste          = "1.0"
procmacros     = { path = "../esp-hal-procmacros", package = "esp-hal-procmacros" }
void           = { version = "1.0", default-features = false }

# RISC-V
riscv                       = { version = "0.8", optional = true }
riscv-atomic-emulation-trap = { version = "0.1", optional = true }

# Xtensa
xtensa-lx    = { version = "0.7",  optional = true }
xtensa-lx-rt = { version = "0.13", optional = true }

# Part of `ufmt` containing only `uWrite` trait
ufmt-write = { version = "0.1", optional = true }

# Smart-LED (e.g., WS2812/SK68XX) support
smart-leds-trait = { version = "0.2.1", optional = true }

critical-section = "1.0.0"

# IMPORTANT:
# Each supported device MUST have its PAC included below along with a
# corresponding feature. We rename the PAC packages because we cannot
# have dependencies and features with the same names.
# NOTE: If we ever raise our MSRV to 1.60.0+ we can use the optional
#       dependency syntax in the features instead of aliasing these packages.
esp32_pac   = { package = "esp32",   version = "0.13.0", optional = true }
esp32c3_pac = { package = "esp32c3", version = "0.5.0",  optional = true }
esp32s2_pac = { package = "esp32s2", version = "0.3.0",  optional = true }
esp32s3_pac = { package = "esp32s3", version = "0.3.0",  optional = true }

[features]
esp32   = ["esp32_pac/rt"  , "procmacros/xtensa", "multi_core" , "xtensa-lx-rt/esp32",   "xtensa-lx/esp32",   "critical-section/restore-state-u32"]
esp32c3 = ["esp32c3_pac/rt", "procmacros/riscv" , "single_core", "riscv", "riscv-atomic-emulation-trap",      "critical-section/restore-state-u8"]
esp32s2 = ["esp32s2_pac/rt", "procmacros/xtensa", "single_core", "xtensa-lx-rt/esp32s2", "xtensa-lx/esp32s2", "critical-section/restore-state-u32"]
esp32s3 = ["esp32s3_pac/rt", "procmacros/xtensa", "multi_core" , "xtensa-lx-rt/esp32s3", "xtensa-lx/esp32s3", "critical-section/restore-state-u32"]

# Core Count (should not be enabled directly, but instead by a PAC's feature)
single_core = []
multi_core   = []

# To support `ufmt`
ufmt = ["ufmt-write"]

# To use the external `smart_led` crate
smartled = ["smart-leds-trait"]

# Implement the `embedded-hal==1.0.0-alpha.x` traits
eh1 = ["embedded-hal-1"]

# To use vectored interrupts (calling the handlers defined in the PAC)
vectored = ["procmacros/interrupt"]
