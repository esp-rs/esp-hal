[package]
name         = "esp-hal-common"
version      = "0.14.0"
edition      = "2021"
rust-version = "1.67.0"
description  = "HAL implementations for peripherals common among Espressif devices; should not be used directly"
repository   = "https://github.com/esp-rs/esp-hal"
license      = "MIT OR Apache-2.0"

# Prevent multiple copies of this crate in the same binary.
# Needed because different copies might get different features, causing
# confusing build errors due to expected features not getting enabled
# on the unintentional copy.
# This is especially common when mixing crates from crates.io and git.
links = "esp-hal-common"

[dependencies]
bitflags             = "2.4.1"
bitfield             = "0.14.0"
cfg-if               = "1.0.0"
critical-section     = "1.1.2"
defmt                = { version = "=0.3.5", optional = true }
embedded-can         = { version = "0.4.1", optional = true }
embedded-dma         = "0.2.0"
embedded-hal         = { version = "0.2.7", features = ["unproven"] }
embedded-hal-1       = { version = "=1.0.0-rc.2", optional = true, package = "embedded-hal" }
embedded-hal-nb      = { version = "=1.0.0-rc.2", optional = true }
embedded-io          = { version = "0.6.1", optional = true }
enumset              = "1.1.3"
esp-synopsys-usb-otg = { version = "0.4.0", optional = true, features = ["fs", "esp32sx"] }
fugit                = "0.3.7"
heapless             = "0.8.0"
log                  = { version = "0.4.20", optional = true }
nb                   = "1.1.0"
paste                = "1.0.14"
portable-atomic      = { version = "1.6.0", default-features = false }
procmacros           = { version = "0.8.0", features = ["enum-dispatch", "ram"], package = "esp-hal-procmacros", path = "../esp-hal-procmacros" }
strum                = { version = "0.25.0", default-features = false, features = ["derive"] }
void                 = { version = "1.0.2", default-features = false }
usb-device           = { version = "0.3.1", optional = true }

# async
embedded-hal-async = { version = "=1.0.0-rc.2", optional = true }
embedded-io-async  = { version = "0.6.1", optional = true }
embassy-executor   = { version = "0.4.0", optional = true }
embassy-futures    = { version = "0.1.1", optional = true }
embassy-sync       = { version = "0.5.0", optional = true }
embassy-time       = { version = "0.2.0", optional = true }

# RISC-V
esp-riscv-rt = { version = "0.6.0", optional = true, path = "../esp-riscv-rt" }

# Xtensa
xtensa-lx    = { version = "0.8.0",  optional = true }
xtensa-lx-rt = { version = "0.16.0", optional = true }

# Part of `ufmt` containing only `uWrite` trait
ufmt-write = { version = "0.1.0", optional = true }

# IMPORTANT:
# Each supported device MUST have its PAC included below along with a
# corresponding feature.
esp32   = { version = "0.28.0", features = ["critical-section"], optional = true }
esp32c2 = { version = "0.16.0", features = ["critical-section"], optional = true }
esp32c3 = { version = "0.19.0", features = ["critical-section"], optional = true }
esp32c6 = { version = "0.10.0", features = ["critical-section"], optional = true }
esp32h2 = { version = "0.6.0",  features = ["critical-section"], optional = true }
esp32s2 = { version = "0.19.0", features = ["critical-section"], optional = true }
esp32s3 = { version = "0.23.0", features = ["critical-section"], optional = true }

[build-dependencies]
basic-toml = "0.1.7"
serde      = { version = "1.0.193", features = ["derive"] }

[features]
esp32   = ["xtensa", "esp32/rt",   "procmacros/esp32",   "xtensa-lx/esp32",   "xtensa-lx-rt/esp32"]
esp32c2 = ["riscv",  "esp32c2/rt", "procmacros/esp32c2", "portable-atomic/unsafe-assume-single-core"]
esp32c3 = ["riscv",  "esp32c3/rt", "procmacros/esp32c3", "portable-atomic/unsafe-assume-single-core"]
esp32c6 = ["riscv",  "esp32c6/rt", "procmacros/esp32c6"]
esp32h2 = ["riscv",  "esp32h2/rt", "procmacros/esp32h2"]
esp32s2 = ["xtensa", "esp32s2/rt", "procmacros/esp32s2", "xtensa-lx/esp32s2", "xtensa-lx-rt/esp32s2", "usb-otg", "portable-atomic/critical-section"]
esp32s3 = ["xtensa", "esp32s3/rt", "procmacros/esp32s3", "xtensa-lx/esp32s3", "xtensa-lx-rt/esp32s3", "usb-otg"]

# Crystal frequency selection (ESP32 and ESP32-C2 only!)
xtal-26mhz = []
xtal-40mhz = []

# Only certain chips support flip-link (ESP32-C6 and ESPS32-H2)
flip-link = ["esp-riscv-rt/fix-sp"]

# PSRAM support
psram-2m = []
psram-4m = []
psram-8m = []

# Octal RAM support
opsram-2m  = []
opsram-4m  = []
opsram-8m  = []
opsram-16m = []

# USB OTG support (ESP32-S2 and ESP32-S3 only! Enabled by default)
usb-otg = ["esp-synopsys-usb-otg", "usb-device"]

# Interrupt-related feature:
#  - Use direct interrupt vectoring (RISC-V only!)
#  - Use interrupt preemption (RISC-V only!)
#  - Use vectored interrupts (calling the handlers defined in the PAC)
direct-vectoring     = ["esp-riscv-rt/direct-vectoring"]
interrupt-preemption = ["esp-riscv-rt/interrupt-preemption"]
vectored             = ["procmacros/interrupt"]

# Enable logging
log = ["dep:log"]

# Trait implementation features:
#  - Implement the `embedded-hal@1.0.0-rc.x` traits (and friends)
#  - Implement the `embedded-io` traits where able
#  - Implement the `ufmt_write::Write` trait where able
eh1         = ["embedded-hal-1", "embedded-hal-nb", "embedded-can"]
embedded-io = ["dep:embedded-io"]
ufmt        = ["ufmt-write"]

# Support for asynchronous operation, implementing traits from
# `embedded-hal-async` and `embedded-io-async`
async = [
    "embedded-hal-async",
    "eh1",
    "embassy-sync",
    "embassy-futures",
    "embedded-io",
    "embedded-io-async",
]

# Embassy support
embassy = ["embassy-time", "procmacros/embassy"]

embassy-executor-interrupt = ["embassy", "embassy-executor"]
embassy-executor-thread    = ["embassy", "embassy-executor"]

embassy-time-systick = []
embassy-time-timg0   = []

# Prefer integrated timers, but allow using the generic queue if needed
embassy-integrated-timers = ["embassy-executor?/integrated-timers"]
embassy-generic-queue-8   = ["embassy-time/generic-queue-8"]
embassy-generic-queue-16  = ["embassy-time/generic-queue-16"]
embassy-generic-queue-32  = ["embassy-time/generic-queue-32"]
embassy-generic-queue-64  = ["embassy-time/generic-queue-64"]
embassy-generic-queue-128 = ["embassy-time/generic-queue-128"]

# Architecture-specific features (intended for internal use)
riscv  = ["critical-section/restore-state-u8", "esp-riscv-rt", "esp-riscv-rt/zero-bss"]
xtensa = ["critical-section/restore-state-u32"]

# Initialize / clear data sections and RTC memory
rv-init-data     = ["esp-riscv-rt/init-data", "esp-riscv-rt/init-rw-text"]
rv-zero-rtc-bss  = ["esp-riscv-rt/zero-rtc-fast-bss"]
rv-init-rtc-data = ["esp-riscv-rt/init-rtc-fast-data", "esp-riscv-rt/init-rtc-fast-text"]

# Enable the `impl-register-debug` feature for the selected PAC
debug = [
    "esp32?/impl-register-debug",
    "esp32c2?/impl-register-debug",
    "esp32c3?/impl-register-debug",
    "esp32c6?/impl-register-debug",
    "esp32h2?/impl-register-debug",
    "esp32s2?/impl-register-debug",
    "esp32s3?/impl-register-debug",
]

# Enable support for `defmt`, for `esp-hal-common` and also for all our dependencies
defmt = [
    "dep:defmt",
    "embassy-executor?/defmt",
    "embassy-futures?/defmt",
    "embassy-sync?/defmt",
    "embassy-time?/defmt",
    "embedded-hal-1?/defmt-03",
    "embedded-io/defmt-03",
    "embedded-io-async?/defmt-03",
]
