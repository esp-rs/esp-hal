/*
Define weak symbols for the ISRs defined by the HAL (for supporting async).
It's not a problem to have anything defined here which is not available on the target so we don't need conditionals here.

However when using `interrupt_internal` it needs to be added here.
*/

PROVIDE(GPIO_HAL = DefaultHandler);
PROVIDE(I2C_EXT0_HAL = DefaultHandler);
PROVIDE(I2C_EXT1_HAL = DefaultHandler);
PROVIDE(PARL_IO_HAL = DefaultHandler);
PROVIDE(PARL_IO_TX_HAL = DefaultHandler);
PROVIDE(RMT_HAL = DefaultHandler);
PROVIDE(SYSTIMER_TARGET0_HAL = DefaultHandler);
PROVIDE(SYSTIMER_TARGET1_HAL = DefaultHandler);
PROVIDE(SYSTIMER_TARGET2_HAL = DefaultHandler);
PROVIDE(UART0_HAL = DefaultHandler);
PROVIDE(UART1_HAL = DefaultHandler);
PROVIDE(UART2_HAL = DefaultHandler);
PROVIDE(USB_DEVICE_HAL = DefaultHandler);
PROVIDE(DMA_CH0_HAL = DefaultHandler);
PROVIDE(DMA_CH1_HAL = DefaultHandler);
PROVIDE(DMA_CH2_HAL = DefaultHandler);
PROVIDE(DMA_IN_CH0_HAL = DefaultHandler);
PROVIDE(DMA_IN_CH1_HAL = DefaultHandler);
PROVIDE(DMA_IN_CH2_HAL = DefaultHandler);
PROVIDE(DMA_IN_CH3_HAL = DefaultHandler);
PROVIDE(DMA_IN_CH4_HAL = DefaultHandler);
PROVIDE(DMA_OUT_CH0_HAL = DefaultHandler);
PROVIDE(DMA_OUT_CH1_HAL = DefaultHandler);
PROVIDE(DMA_OUT_CH2_HAL = DefaultHandler);
PROVIDE(DMA_OUT_CH3_HAL = DefaultHandler);
PROVIDE(DMA_OUT_CH4_HAL = DefaultHandler);
PROVIDE(SPI2_DMA_HAL = DefaultHandler);
PROVIDE(SPI3_DMA_HAL = DefaultHandler);
PROVIDE(I2S0_HAL = DefaultHandler);
PROVIDE(I2S1_HAL = DefaultHandler);
PROVIDE(TG0_T0_LEVEL_HAL = DefaultHandler);
PROVIDE(TG0_T1_LEVEL_HAL = DefaultHandler);
PROVIDE(FROM_CPU_INTR0_HAL = DefaultHandler);
PROVIDE(RSA_HAL = DefaultHandler);

PROVIDE(GPIO = GPIO_HAL);
PROVIDE(I2C_EXT0 = I2C_EXT0_HAL);
PROVIDE(I2C_EXT1 = I2C_EXT1_HAL);
PROVIDE(PARL_IO = PARL_IO_HAL);
PROVIDE(PARL_IO_TX = PARL_IO_TX_HAL);
PROVIDE(RMT = RMT_HAL);
PROVIDE(SYSTIMER_TARGET0 = SYSTIMER_TARGET0_HAL);
PROVIDE(SYSTIMER_TARGET1 = SYSTIMER_TARGET1_HAL);
PROVIDE(SYSTIMER_TARGET2 = SYSTIMER_TARGET2_HAL);
PROVIDE(UART0 = UART0_HAL);
PROVIDE(UART1 = UART1_HAL);
PROVIDE(UART2 = UART2_HAL);
PROVIDE(USB_DEVICE = USB_DEVICE_HAL);
PROVIDE(DMA_CH0 = DMA_CH0_HAL);
PROVIDE(DMA_CH1 = DMA_CH1_HAL);
PROVIDE(DMA_CH2 = DMA_CH2_HAL);
PROVIDE(DMA_IN_CH0 = DMA_IN_CH0_HAL);
PROVIDE(DMA_IN_CH1 = DMA_IN_CH1_HAL);
PROVIDE(DMA_IN_CH2 = DMA_IN_CH2_HAL);
PROVIDE(DMA_IN_CH3 = DMA_IN_CH3_HAL);
PROVIDE(DMA_IN_CH4 = DMA_IN_CH4_HAL);
PROVIDE(DMA_OUT_CH0 = DMA_OUT_CH0_HAL);
PROVIDE(DMA_OUT_CH1 = DMA_OUT_CH1_HAL);
PROVIDE(DMA_OUT_CH2 = DMA_OUT_CH2_HAL);
PROVIDE(DMA_OUT_CH3 = DMA_OUT_CH3_HAL);
PROVIDE(DMA_OUT_CH4 = DMA_OUT_CH4_HAL);
PROVIDE(SPI2_DMA = SPI2_DMA_HAL);
PROVIDE(SPI3_DMA = SPI2_DMA_HAL);
PROVIDE(I2S0 = I2S0_HAL);
PROVIDE(I2S1 = I2S0_HAL);
PROVIDE(TG0_T0_LEVEL = TG0_T0_LEVEL_HAL);
PROVIDE(TG0_T1_LEVEL = TG0_T0_LEVEL_HAL);
PROVIDE(FROM_CPU_INTR0 = FROM_CPU_INTR0_HAL);
PROVIDE(RSA = RSA_HAL);
