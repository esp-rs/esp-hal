[package]
name          = "esp-storage"
version       = "0.7.0"
edition       = "2024"
rust-version  = "1.86.0"
description   = "Implementation of embedded-storage traits to access unencrypted ESP32 flash"
documentation = "https://docs.espressif.com/projects/rust/esp-storage/latest/"
keywords      = ["embedded-storage", "esp32", "espressif", "no-std"]
categories    = ["embedded", "hardware-support", "no-std"]
repository    = "https://github.com/esp-rs/esp-hal"
license       = "MIT OR Apache-2.0"

[package.metadata.espressif]
check-configs = [
    { features = [], append = [
        { features = ["portable-atomic/unsafe-assume-single-core"], if = 'chip == "esp32c2" || chip == "esp32c3" || chip == "esp32s2"' }
    ] },
    { features = ["critical-section"], append = [
        { features = ["portable-atomic/unsafe-assume-single-core"], if = 'chip == "esp32c2" || chip == "esp32c3" || chip == "esp32s2"' }
    ] },
    { features = ["bytewise-read"], append = [
        { features = ["portable-atomic/unsafe-assume-single-core"], if = 'chip == "esp32c2" || chip == "esp32c3" || chip == "esp32s2"' }
    ] },
    { features = ["critical-section", "bytewise-read"], append = [
        { features = ["portable-atomic/unsafe-assume-single-core"], if = 'chip == "esp32c2" || chip == "esp32c3" || chip == "esp32s2"' }
    ] },
]
clippy-configs = [{ features = ["critical-section", "bytewise-read"], append = [
    { features = ["portable-atomic/unsafe-assume-single-core"], if = 'chip == "esp32c2" || chip == "esp32c3" || chip == "esp32s2"' }
]}]

[package.metadata.docs.rs]
default-target = "riscv32imac-unknown-none-elf"
features       = ["esp32c6"]

[lib]
bench = false

[dependencies]
embedded-storage = "0.3.1"
procmacros       = { version = "0.19.0", package = "esp-hal-procmacros", path = "../esp-hal-procmacros" }
cfg-if           = "1.0.0"
portable-atomic          = { version = "1.11.0", default-features = false }
esp-hal = { version = "1.0.0-rc.0", path = "../esp-hal", default-features = false, optional = true}

# Optional dependencies
esp-sync         = { version = "0.0.0", path = "../esp-sync", optional = true }
esp-rom-sys      = { version = "0.1.1", path = "../esp-rom-sys", optional = true }
defmt  = { version = "1.0.1", optional = true }

# Unstable dependencies that are not (strictly) part of the public API
document-features = "0.2.11"

[target.'cfg(target_arch = "riscv32")'.dependencies]
riscv            = { version = "0.14.0", optional = true}

[target.'cfg(target_arch = "xtensa")'.dependencies]
xtensa-lx        = { version = "0.12.0", path = "../xtensa-lx", optional = true }

[build-dependencies]
esp-metadata-generated = { version = "0.1.0", path = "../esp-metadata-generated", features = ["build-script"] }

[features]
default = ["critical-section"]

## Place the flash operations in a critical section
critical-section = []

## Bytewise read emulation
bytewise-read = []

## Implement `defmt::Format` on certain types.
defmt = ["dep:defmt"]

#! ### Chip selection
#! One of the following features must be enabled to select the target chip:

##
esp32c2   = ["esp-hal/esp32c2", "esp-hal/unstable", "esp-rom-sys/esp32c2", "esp-sync/esp32c2"]
##
esp32c3   = ["esp-hal/esp32c3", "esp-hal/unstable", "esp-rom-sys/esp32c3", "esp-sync/esp32c3"]
##
esp32c6   = ["esp-hal/esp32c6", "esp-hal/unstable", "esp-rom-sys/esp32c6", "esp-sync/esp32c6"]
##
esp32h2   = ["esp-hal/esp32h2", "esp-hal/unstable", "esp-rom-sys/esp32h2", "esp-sync/esp32h2"]
##
esp32     = ["esp-hal/esp32", "esp-hal/unstable", "esp-rom-sys/esp32", "esp-sync/esp32", "xtensa-lx"]
##
esp32s2   = ["esp-hal/esp32s2", "esp-hal/unstable", "esp-rom-sys/esp32s2", "esp-sync/esp32s2"]
##
esp32s3   = ["esp-hal/esp32s3", "esp-hal/unstable", "esp-rom-sys/esp32s3", "esp-sync/esp32s3", "xtensa-lx"]
## Used for testing on a host.
emulation = []
