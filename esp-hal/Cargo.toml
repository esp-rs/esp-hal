[package]
name          = "esp-hal"
version       = "0.17.0"
edition       = "2021"
rust-version  = "1.76.0"
description   = "Bare-metal HAL for Espressif devices"
documentation = "https://docs.esp-rs.org/esp-hal/"
repository    = "https://github.com/esp-rs/esp-hal"
license       = "MIT OR Apache-2.0"
links         = "esp-hal"

[package.metadata.docs.rs]
default-target = "riscv32imac-unknown-none-elf"
features       = ["embedded-hal", "esp32c6"]
rustdoc-args   = ["--cfg", "docsrs"]

[dependencies]
bitflags             = "2.5.0"
bitfield             = "0.15.0"
cfg-if               = "1.0.0"
critical-section     = "1.1.2"
defmt                = { version = "0.3.6", optional = true }
document-features    = "0.2.8"
embassy-executor     = { version = "0.5.0", optional = true }
embassy-futures      = { version = "0.1.1", optional = true }
embassy-sync         = { version = "0.5.0", optional = true }
embassy-time-driver  = { version = "0.1.0", optional = true }
embedded-can         = { version = "0.4.1", optional = true }
embedded-dma         = "0.2.0"
embedded-hal-02      = { version = "0.2.7", optional = true, features = ["unproven"], package = "embedded-hal" }
embedded-hal         = { version = "1.0.0", optional = true }
embedded-hal-async   = { version = "1.0.0", optional = true }
embedded-hal-nb      = { version = "1.0.0", optional = true }
embedded-io          = { version = "0.6.1", optional = true }
embedded-io-async    = { version = "0.6.1", optional = true }
enumset              = "1.1.3"
esp-synopsys-usb-otg = { version = "0.4.1", optional = true, features = ["fs", "esp32sx"] }
fugit                = "0.3.7"
log                  = { version = "0.4.21", optional = true }
nb                   = "1.1.0"
paste                = "1.0.14"
portable-atomic      = { version = "1.6.0", default-features = false }
procmacros           = { version = "0.10.0", features = ["enum-dispatch", "interrupt", "ram"], package = "esp-hal-procmacros", path = "../esp-hal-procmacros" }
riscv                = { version = "0.11.1", optional = true }
strum                = { version = "0.26.2", default-features = false, features = ["derive"] }
void                 = { version = "1.0.2", default-features = false }
usb-device           = { version = "0.3.2", optional = true }
rand_core            = "0.6.4"
ufmt-write           = { version = "0.1.0", optional = true }
xtensa-lx            = { version = "0.9.0", optional = true }

# IMPORTANT:
# Each supported device MUST have its PAC included below along with a
# corresponding feature.
esp32   = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }
esp32c2 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }
esp32c3 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }
esp32c6 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }
esp32h2 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3",  features = ["critical-section", "rt"], optional = true }
esp32s2 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }
esp32s3 = { git = "https://github.com/esp-rs/esp-pacs/", rev = "400b3b3", features = ["critical-section", "rt"], optional = true }

[target.'cfg(target_arch = "riscv32")'.dependencies]
esp-riscv-rt = { version = "0.8.0", path = "../esp-riscv-rt" }

[target.'cfg(target_arch = "xtensa")'.dependencies]
xtensa-lx-rt = "0.16.0"

[build-dependencies]
basic-toml   = "0.1.9"
cfg-if       = "1.0.0"
esp-build    = { version = "0.1.0", path = "../esp-build" }
esp-metadata = { version = "0.1.0", path = "../esp-metadata" }
serde        = { version = "1.0.197", features = ["derive"] }

[features]
default = ["embedded-hal"]

riscv  = ["dep:riscv",     "critical-section/restore-state-u8",  "esp-riscv-rt/zero-bss"]
xtensa = ["dep:xtensa-lx", "critical-section/restore-state-u32"]

bluetooth = []

usb-otg = ["esp-synopsys-usb-otg", "usb-device"]

## Enable debug features in the HAL (used for development).
debug = [
    "esp32?/impl-register-debug",
    "esp32c2?/impl-register-debug",
    "esp32c3?/impl-register-debug",
    "esp32c6?/impl-register-debug",
    "esp32h2?/impl-register-debug",
    "esp32s2?/impl-register-debug",
    "esp32s3?/impl-register-debug",
]
## Enable logging output using the `log` crate.
log = ["dep:log"]
## Configuration for placing device drivers in the IRAM for faster access.
place-spi-driver-in-ram = []

# Chip Support Feature Flags
# Target the ESP32.
esp32   = ["dep:esp32",   "xtensa", "xtensa-lx/spin", "xtensa-lx-rt/esp32"]
# Target the ESP32-C2.
esp32c2 = ["dep:esp32c2", "riscv",  "portable-atomic/unsafe-assume-single-core"]
# Target the ESP32-C3.
esp32c3 = ["dep:esp32c3", "riscv",  "portable-atomic/unsafe-assume-single-core", "rv-zero-rtc-bss"]
# Target the ESP32-C6.
esp32c6 = ["dep:esp32c6", "riscv",  "procmacros/has-lp-core", "rv-zero-rtc-bss"]
# Target the ESP32-H2.
esp32h2 = ["dep:esp32h2", "riscv", "rv-zero-rtc-bss"]
# Target the ESP32-S2.
esp32s2 = ["dep:esp32s2", "xtensa", "portable-atomic/critical-section", "procmacros/has-ulp-core", "xtensa-lx-rt/esp32s2", "usb-otg"]
# Target the ESP32-S3.
esp32s3 = ["dep:esp32s3", "xtensa", "procmacros/has-ulp-core", "xtensa-lx/spin", "xtensa-lx-rt/esp32s3", "usb-otg"]

#! ### RISC-V Exclusive Feature Flags
## Move the stack to start of RAM to get zero-cost stack overflow protection
## (ESP32-C6 and ESPS32-H2 only!).
flip-link = ["esp-riscv-rt/fix-sp"]
## Initialize the `.data` section of memory.
rv-init-data = ["esp-riscv-rt/init-data", "esp-riscv-rt/init-rw-text"]
## Zero the `.bss` section of low-power memory.
rv-zero-rtc-bss = ["esp-riscv-rt/zero-rtc-fast-bss"]
## Initialize the `.data` section of low-power memory.
rv-init-rtc-data = ["esp-riscv-rt/init-rtc-fast-data", "esp-riscv-rt/init-rtc-fast-text"]

#! ### Trait Implementation Feature Flags
## Enable support for asynchronous operation, with interfaces provided by
## `embedded-hal-async` and `embedded-io-async`.
async = [
    "embedded-hal",
    "embedded-hal-async",
    "embassy-sync",
    "embassy-futures",
    "embedded-io",
    "embedded-io-async",
]
## Implement `defmt::Format` on certain types.
defmt = [
    "dep:defmt",
    "embassy-executor?/defmt",
    "embassy-futures?/defmt",
    "embassy-sync?/defmt",
    "embedded-hal?/defmt-03",
    "embedded-io/defmt-03",
    "embedded-io-async?/defmt-03",
    "esp32?/defmt",
    "esp32c2?/defmt",
    "esp32c3?/defmt",
    "esp32c6?/defmt",
    "esp32h2?/defmt",
    "esp32s2?/defmt",
    "esp32s3?/defmt",
]
## Implement the traits defined in the `1.0.0` releases of `embedded-hal` and
## `embedded-hal-nb` for the relevant peripherals.
embedded-hal = ["dep:embedded-hal", "dep:embedded-hal-nb", "dep:embedded-can"]
## Implement the traits defined in the `0.2.x` release of `embedded-hal`.
embedded-hal-02 = ["dep:embedded-hal-02"]
## Implement the traits defined in `embedded-io` for certain peripherals.
embedded-io = ["dep:embedded-io"]
## Implement the `ufmt_write::uWrite` trait for certain peripherals.
ufmt = ["dep:ufmt-write"]

#! ### Embassy Feature Flags
## Enable support for `embassy`, a modern asynchronous embedded framework.
embassy = ["embassy-time-driver", "procmacros/embassy"]
## Use the interrupt-mode embassy executor.
embassy-executor-interrupt = ["embassy", "embassy-executor"]
## Use the thread-mode embassy executor.
embassy-executor-thread = ["embassy", "embassy-executor"]
## Uses hardware timers as alarms for the executors. Using this feature
## limits the number of executors to the number of hardware alarms provided
## by the time driver.
embassy-integrated-timers = ["embassy-executor?/integrated-timers"]
## Enable the embassy time driver using the `SYSTIMER` peripheral. The
## `SYSTIMER` peripheral has three alarams available for use. Do **not** 
## use when targeting an `esp32s2`.
embassy-time-systick-16mhz = ["embassy-time-driver/tick-hz-16_000_000"]
## Enable the embassy time driver using the `SYSTIMER` peripheral. The
## `SYSTIMER` peripheral has three alarams available for use. Must only 
## be used when targeting an `esp32s2`.
embassy-time-systick-80mhz = ["embassy-time-driver/tick-hz-80_000_000"]
## Enable the embassy time driver using the `TIMG0` peripheral. The `TIMG0`
## peripheral has two alarms available for use.
embassy-time-timg0 = ["embassy-time-driver/tick-hz-1_000_000"]

#! ### PSRAM Feature Flags
## Use externally connected PSRAM (2MB).
psram-2m = []
## Use externally connected PSRAM (4MB).
psram-4m = []
## Use externally connected PSRAM (8MB).
psram-8m = []
## PSRAM 80Mhz frequency support
psram-80mhz = []

#! ### Octal RAM Feature Flags
## Use externally connected Octal RAM (2MB).
opsram-2m = []
## Use externally connected Octal RAM (4MB).
opsram-4m = []
## Use externally connected Octal RAM (8MB).
opsram-8m = []
## Use externally connected Octal RAM (16MB).
opsram-16m = []

# This feature is intended for testing; you probably don't want to enable it:
ci = [
    "default",
    "embedded-hal-02",
    "ufmt",
    "async",
]

[lints.clippy]
mixed_attributes_style = "allow"
